<?xml version="1.0" encoding="utf-8"?>
<!--
	 Copyright (c) 2009 Team Axiis

	 Permission is hereby granted, free of charge, to any person
	 obtaining a copy of this software and associated documentation
	 files (the "Software"), to deal in the Software without
	 restriction, including without limitation the rights to use,
	 copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the
	 Software is furnished to do so, subject to the following
	 conditions:

	 The above copyright notice and this permission notice shall be
	 included in all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	 OTHER DEALINGS IN THE SOFTWARE.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:axiis="http://www.axiis.org/2009"
	xmlns:degrafa="http://www.degrafa.com/2007"
	xmlns:charts="org.axiis.charts.*"
	xmlns:geometry="com.degrafa.geometry.*" 
	xmlns:Examples="Examples.*"
	backgroundGradientColors="[0xDDDDDD,0xF5F5F5]"
	layout="absolute"
	creationComplete="start();" viewSourceURL="srcview/index.html" xmlns:debug="org.axiis.debug.*" >
 
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.events.SliderEvent;
			
			import org.axiis.core.AxiisSprite;
			import org.axiis.data.DataSet;
			import org.axiis.events.LayoutItemEvent;

			private var ds:DataSet = null;
			
			private var date_list:ArrayCollection = null;
			
			private function get_top_players_count (players:ArrayCollection) : int {
				var cursor:IViewCursor = players.createCursor();
				
				var total_sum:int = 0;
				
				while (!cursor.afterLast) {
					total_sum += cursor.current.count;	
					
					cursor.moveNext();
				}
				
				return total_sum;
			}
			
			private function aggregate_resting_players () : void {
				var cursor:IViewCursor = date_list.createCursor();
				
				while (!cursor.afterLast) {
					var players:ArrayCollection = cursor.current.players;
					var total:int = cursor.current.total;
					
					var top_players_count:int = get_top_players_count(players);
					var resting_players_count:int = total - top_players_count;
					
					var agregated_player:Object = new Object();
					
					agregated_player.name = "Resto";
					agregated_player.count = resting_players_count;
					
					players.addItem(agregated_player);
					
					cursor.moveNext();
				}
			}
			
			private function update_players (date_info:Object, player:Object) : void {
				var players:Object = date_info.players;
				
				if (players.length < num_players) {
					players.addItem(player);
					
					return;
				}
				
				//Change one player with other
				var cursor:IViewCursor = players.createCursor();
				
				while (!cursor.afterLast) {
					
					if (cursor.current.count < player.count) {
						cursor.current.name = player.name;
						cursor.current.count = player.count;
						
						return;
					}
					
					cursor.moveNext();
				}
			}

			private function createDateInfo (date:String) : Object {				
				var date_info:Object = new Object();
				
				date_info.name = date;
				date_info.total = 0;
				date_info["players"] = new ArrayCollection();
				
				date_list.addItem(date_info);
				
				return date_info;
			}
			
			private function getDateInfo (date:String) : Object {
				var cursor:IViewCursor = date_list.createCursor();
				
				while (!cursor.afterLast) {
					
					if (cursor.current.name == date) {
						return cursor.current;
					}
					
					cursor.moveNext();
				}
				
				return null;
			}
			
			public function start():void {
				
				dc.invalidateDisplayList();
				
				ds = new DataSet();
				
				ds.processCsvAsTable(payload, false);
				
				date_list = new ArrayCollection();
				 
				for each (var row:Object in ds.data.table.rows) {
					var name:String = row.columns[0].value;
					var date:String = row.columns[1].value;
					var count:int = parseInt(row.columns[2].value);
					
					var date_info:Object = getDateInfo(date);
					
					if ( date_info == null ) {
						date_info = createDateInfo(date);
					} 
					
					date_info.total += count;
					
					var player_date_info:Object = new Object();
					
					player_date_info.name = name;
					player_date_info.count = count;
					
					update_players(date_info, player_date_info);
				}
				
				aggregate_resting_players();
				
				
				dataProvider = date_list;
				
				dc.invalidateDisplayList();
			}
			
			private function num_players_changed(event:SliderEvent	) : void {
				num_players = Math.round(event.value);
				
				start();
			}

			//Currently not being used - DataTips being refactored
			private function dataTipFunction(axiisSprite:AxiisSprite):String
			{
				if (axiisSprite.data["competitors"] != null && axiisSprite.data["name"] != null)
				{
					return "<b>" + axiisSprite.data["name"] + " Total Medals</b><br/>" + axiisSprite.data["competitors"];
				}
				else if (axiisSprite.data["count"] != null && axiisSprite.data["name"] != null)
				{
					return "<b>" + axiisSprite.data["name"] + " <br/>" + axiisSprite.data["count"];
				}
				return "";
			}

			//Used to rotate wedge labels 180 degrees for readability
			private function transposeLabel1(wedge:Object):Boolean
			{
				if ((wedge.startAngle + wedge.arc / 2) > 90 && (wedge.startAngle + wedge.arc / 2) < 270)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
		
			public function colorFunction(val:Object):Number
			{
				return Number(val) & -0x333333;
			}

			protected function show_all_players(event:MouseEvent):void {
				var selected:Boolean = event.currentTarget.selected;
				
				if (selected) {
					num_players = 50;
					slider.enabled = false;
				} else {
					num_players = slider.value;
					slider.enabled = true;
				}
				
				start();
			}

		]]>
	</mx:Script>
	<mx:Style source="styles/Axiis_Examples.css"/>
	
	<!-- Data payload -->
	<mx:String id="payload" source="data/turkey2010_day_list.csv"/>

	<!-- Data Provider -->
	<mx:Object id="dataProvider"/>

	<!-- Number of players per date -->
	<mx:int id="num_players">2</mx:int>

	<!-- Preference Settings -->
	<mx:Number id="angleGap">.5</mx:Number>
	<mx:Number id="innerRadi1">.4</mx:Number>
	<mx:Number id="innerRadi2">.78</mx:Number>
	<mx:Number id="outerRadi1">.78</mx:Number>
	<mx:Number id="outerRadi2">1</mx:Number>

	<!-- Common calculations used by geometries -->
	<axiis:NumericExpression id="outerRadius" value="{(dc.width/2)*outerRadi2}"/>
	<axiis:NumericExpression id="center" value="{boundsRadius.value/2}"/>
	<axiis:NumericExpression id="boundsRadius" value="{Math.min(this.height,this.width)*.7}"/>
	
	<!-- Background template -->
	<Examples:ExampleBackground width="{this.width}" height="{this.height}" title="Mundial de Baloncesto Turquia 2010" subTitle="Jugadores mas comentados por dia"/>

	<!-- Data Canvas that holds our geometries -->
	<axiis:DataCanvas id="dc"
		width="{boundsRadius.value}"
		height="{boundsRadius.value}"
		horizontalCenter="0"
		verticalCenter="0"
		showDataTips="false">
		<axiis:layouts>
			<!-- innerWedgeGroup:  This renders the inner ring of wedges -->
			
			<axiis:WedgeStackGroup id="innerWedgeGroup"
				dataProvider="{dataProvider}"
				startAngle="0"
				outerRadiusRatio=".78"
				width="{dc.width}"
				height="{dc.height}"
				labelField="name"
				dataField="total"
				fill="{innerWedgeFill}"
				fontFamily="Myriad Pro"
				fontSize="14"
				fontColor="0xFFFFFF" 
				>
 				
 				<axiis:layouts>
 					<axiis:WedgeStackGroup id="outerWedgeGroup"
 						dataProvider="{innerWedgeGroup.currentDatum.players}"
 						maxArc="{innerWedgeGroup.wedge.arc}"
 						startAngle="{innerWedgeGroup.wedge.startAngle}"
 						alignTextOuter="true"
 						angleGap="0"
 						innerRadiusRatio=".78"
 						outerRadiusRatio="1"
 						labelRadiusRatio="1.035"
 						width="{dc.width}"
 						height="{dc.height}"
 						labelField="name"
 						dataField="count"
 						dataTipLabelFunction="{dataTipFunction}"
 						fill="{outerWedgeFill}"
 						stroke="{outerWedgeStroke}"
 						fontSize="11"
 						fontColor="{wedgePalette.currentColor}">
 						
 						<!-- State for outer wedge to change color and make it move out further -->
						<axiis:states>
							<axiis:State enterStateEvent="mouseOver" 
								exitStateEvent="mouseOut"
								propagateToAncestorsSiblings="false"
								propagateToAncestors="true"
								propagateToDescendents="false"
								targets="{[outerWedgeFill,outerWedgeGroup.wedge,outerWedgeGroup.label,innerWedgeGroup.label]}"
								properties="{['color','outerRadius','textColor','fontWeight']}"
								values="{[colorFunction,outerRadius.value*1.2,0xFFFFFF,'bold']}" />
						</axiis:states>

					</axiis:WedgeStackGroup>
 					
 				</axiis:layouts>

				<axiis:states>
					 
				<axiis:State enterStateEvent="mouseOver"
						exitStateEvent="mouseOut"
						propagateToAncestorsSiblings="false"
						propagateToAncestors="false"
						propagateToDescendents="true"
						targets="{[innerWedgeFillStop1,outerWedgeFill, outerWedgeGroup ,outerWedgeGroup.label]}"	
						properties="{['color','color','outerRadiusRatio','fontWeight']}"
						values="{[colorFunction,colorFunction,1.1,'bold']}"/>
						
				</axiis:states>

			</axiis:WedgeStackGroup>
		</axiis:layouts>

		<!-- Palletes used to generate our colors -->
		<axiis:palettes>
			<axiis:LayoutAutoPalette id="wedgePalette" colorFrom="0xD20000" colorTo="0x0000BD" layout="{innerWedgeGroup}"/>
			<axiis:LayoutAutoPalette id="outerWedgePalette" colorFrom="{wedgePalette.currentColor | 0x2B2B11}" colorTo="{wedgePalette.currentColor | 0x151511}" layout="{outerWedgeGroup}"/>
		</axiis:palettes>

		<!-- Fills that use the colors generated by our palettes -->
		<axiis:fills>
			<degrafa:RadialGradientFill id="innerWedgeFill" cx="{innerWedgeGroup.width/2}" cy="{innerWedgeGroup.width/2}" radius="{(innerWedgeGroup.width/2)*innerRadi2}">
				<degrafa:GradientStop color="{wedgePalette.currentColor | 0x333333}" ratio=".6" />
				<degrafa:GradientStop color="{wedgePalette.currentColor}" id="innerWedgeFillStop1" ratio=".92" />
				<degrafa:GradientStop color="{wedgePalette.currentColor &amp; -0x352234}" ratio="1"/>
			</degrafa:RadialGradientFill>
			<degrafa:SolidFill color="{outerWedgePalette.currentColor}" id="outerWedgeFill"/>
			<degrafa:SolidFill color="0xFFFF00" id="rollOverFill0" alpha=".9"/>
			<degrafa:SolidFill color="0xFF00FF" id="rollOverFill1" alpha=".9"/>
		</axiis:fills>

		<axiis:strokes>
			<degrafa:SolidStroke color="0" alpha=".6" pixelHinting="true" id="outerWedgeStroke"/>
		</axiis:strokes>
			
	</axiis:DataCanvas>
	
	<mx:HSlider x="220" y="19" width="309" height="16" 
				minimum="1" maximum="10" labels="[1,2,3,4,5,6,7,8,9,10]"
				snapInterval="1" tickInterval="1"
				change="num_players_changed(event)" id="slider" />
	
	<mx:CheckBox x="549" y="19" label="Todos" click="show_all_players(event)"/>

</mx:Application>
