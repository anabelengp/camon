<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:charts="org.axiis.charts.*"
				layout="absolute"
				backgroundGradientColors="[0xDDDDDD,0xF5F5F5]"
				creationComplete="start();"
				xmlns:axiis="http://www.axiis.org/2009"
				xmlns:series="org.axiis.charts.series.*"
				xmlns:groupings="org.axiis.charts.groupings.*"
				xmlns:degrafa="http://www.degrafa.com/2007"
				xmlns:states="org.axiis.states.*"
				xmlns:paint="org.axiis.paint.*"
				xmlns:Examples="Examples.*"
				xmlns:axis="org.axiis.charts.axis.*"
				xmlns:labels="org.axiis.charts.labels.*"
				xmlns:utils="org.axiis.utils.*" viewSourceURL="srcview/index.html">
	
	<mx:Style source="styles/Axiis_Examples.css"/>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			
			import org.axiis.data.DataSet;
			
			private var ds:DataSet = null;
			
			public function start():void
			{
				ds = new DataSet();
				
				dc.invalidateDisplayList();
					
				ds.processCsvAsTable(payload, false);
				
				ds.data.adapted_table = new Object();
				
				ds.data.adapted_table.header = new Array();
				
				var player_names:ArrayCollection = new ArrayCollection(); 
				
				ds.data.adapted_table.rows = player_names;
				
				var first_player:Boolean = true;
				var counter:int = 0;
				for each (var row:Object in ds.data.table.rows) {
					var name:String = row.columns[0].value;
					var date:String = row.columns[1].value;
					var count:String = row.columns[2].value;
					
					if (selected_player(name) == false)
						continue;
					
					var player_info:Object = null;
					
					if (player_names.length < 1) {
						// Create a new player and keeping first_player
						player_info = new Object();
						
						player_info.name = name;
						player_info["columns"] = new ArrayCollection();
						
						player_names.addItem(player_info);
						
						counter = 0;
						
						lista_jugadores.addItem(player_info);
					} else {
						if (player_names.getItemAt(player_names.length -1).name != name) {
							player_info = new Object();
							
							player_info.name = name;
							player_info["columns"] = new ArrayCollection();
							
							player_names.addItem(player_info);
							
							first_player = false;
							
							counter = 0;
							
							lista_jugadores.addItem(player_info);
						} 
						else {
							player_info = player_names.getItemAt(player_names.length -1);	
						}
					}
					
					if (first_player)
						ds.data.adapted_table.header.push(date);
					
					var data_object:Object = new Object();
					
					data_object.index = counter;
					data_object.name = date;
					data_object.value = count;
					
					
					player_info.columns.addItem(data_object);
					
					counter ++;
				}
				
				dataProvider = ds.data.adapted_table.rows;
				
				// Set the intial dp to the intial setting of the %data slider
				hScale.dataProvider=ds.data.adapted_table.header.slice(1,dataSlice.value+1);
				hAxis.invalidateDataProvider();
				// Has to be called any time the dataCanvas dp is changed
				dc.invalidateDisplayList();
			}
			
			private function selected_player(player:String) : Boolean {
				var selected_players:Array = jugadores_seleccionados.selectedItems;
				
				if (selected_players.length == 0)
					return true;
				
				for each (var selected_player:Object in selected_players) {
					if (player == selected_player.name)
						return true;	
				}
				
				return false;
			}
			
			private function compara_jugadores_key_up(event:KeyboardEvent) : void {
				if (event.keyCode != 17)
					return;
				
				// Comparing several players
				start();
			}
			
			private function compara_jugadores_click(event:MouseEvent) : void {
				if (event.ctrlKey)
					return;
				
				// Comparing only one player
				start();
			}
			
			private function sliceData():void {
				hScale.dataProvider=ds.data.adapted_table.header.slice(1,dataSlice.value+1);
				hAxis.invalidateDataProvider();
				myLineGroup.invalidateDataProvider();
				dc.invalidateDisplayList(); 
			}
			
			/**
			 * The labelFunction property of the LineSeriesGroup, and other components, allow you to 
			 * to determine how each to format each label the component displays
			 */
			private function axisLabel(obj:Object):String
			{
				return formatter.format(Number(obj) / 1000);
			}
			
			private function filterColumns(obj:Object):Boolean
			{
				//Don't want filter fields, trim columns
				if (obj.index < 1 || obj.index > dataSlice.value)
					return false;
				else
					return true;
			}
			
			private function filterRows(obj:Object):Boolean
			{
				//Trim our rows
				if (obj.name == "Apples")
					return false;
				else
					return true;
			}

		]]>
	</mx:Script>
	
	<!-- places a convenient background on the chart -->
	<Examples:ExampleBackground width="100%" height="100%" title="Mundial de Baloncesto Turquia 2010" subTitle="Comparador de Jugadores"/>
	
	<!-- 
	The data we're reading from, you'd most likely be using an AC from someplace else 
	-->
	<mx:String id="payload" source="data/turkey2010_day_list.csv"/>
	
	<mx:CurrencyFormatter currencySymbol="k"
						  precision="0"
						  id="formatter"
						  alignSymbol="right"
						  useThousandsSeparator="true"/>
	
	<!--  GLOBAL VARIABLES -->
	<mx:Object id="dataProvider"/>
	<mx:ArrayCollection id="lista_jugadores"/>
	<mx:String id="verticalField"/>
	<mx:Number id="percentGap">.02</mx:Number>
	
	<utils:NumericExpression id="tension" value="{slider.value/210}" valueChanged="{if (myLineGroup) dc.invalidateDisplayList();}"/>
	
	
	<!--  
	A scale that deals with linear numeric data.
	-->
	<axiis:LinearScale id="vScale"
					   dataProvider="{dataProvider}"
					   minLayout="0"
					   maxLayout="{myLineGroup.height}"
					   />
	
	<!--
	A scale that converts categorical (String) data into layout space. The categories are assumed to be sorted alphabetically. 
	-->
	<axiis:CategoricalScale id="hScale"
							minLayout="0"
							maxLayout="{myLineGroup.width}"
							/>
	
	<!--
	DataCanvas manages the placement and the rendering of layouts.
	They can have backgroundGeometries, foregroundGeometries, and layouts.
	They inherit from Canvas
	-->
	<axiis:DataCanvas width="80%"
					  id="dc"
					  top="120"
					  bottom="100"
					  horizontalCenter="0"
					  strokes="{strokes}"
					  fills="{fills}"
					  palettes="{palettes}"
					  showDataTips="true">
		
		<axiis:backgroundGeometries>
			<axis:VAxis 
				id="vAxis"
				verticalScale="{vScale}"
				tickStroke="{axisStroke}"
				width="{dc.width}"
				height="{myLineGroup.height}"
				showDataTips="false"
				fontFamily="Myriad Pro"
				fontColor="0"
				fontSize="14"
				tickGap="5"
				majorTickSpacing="50"
				/>
			
			<axiis:HCategoryAxis 
				id="hAxis"
				x="{myLineGroup.x}"
				categoryScale="{this.hScale}"
				width="{myLineGroup.width}"
				dataProvider="{hScale.dataProvider}"
				height="50"
				y="{myLineGroup.height}"/>
			
			<degrafa:Line 
				x="0"
				x1="{myLineGroup.x+myLineGroup.width}"
				y="{myLineGroup.height}"
				y1="{myLineGroup.height}"
				stroke="{axisStroke}"/>
		</axiis:backgroundGeometries>
		
		<axiis:layouts>
			<groupings:LineSeriesGroup id="myLineGroup"
									   x="12"
									   y="0"
									   height="{dc.height-70}"
									   width="{dc.width}"
									   tension="{tension.value}"
									   markerColor="{areaPalette.currentColor}"		
									   dataFilterFunction="{filterRows}"
									   showArea="{area.selected}"
									   plotFilterFunction="{filterColumns}"
									   markerSize="8"
									   showMarker="{showMarker.selected}"
									   mode="{LineSeriesGroup.MODE_BASELINE}"
									   dataProvider="{dataProvider}"
									   plotCollection="columns"
									   dataField="value"
									   labelField="name"
									   xDataField="name"
									   plotLabelField="name"
									   verticalScale="{vScale}"
									   horizontalScale="{hScale}"
									   stroke="{myStroke}"
									   fill="{areaFill}"
									   enableRollOver="true"/>
			
		</axiis:layouts>
		
	</axiis:DataCanvas>
	
	<mx:Array id="palettes">
		<paint:LayoutAutoPalette id="outerPalette" layout="{myLineGroup}" colorFrom="0xCC3333" colorTo="0x3333CC"/>
		<paint:LayoutAutoPalette id="clusterPalette" layout="{myLineGroup}" colorFrom="{outerPalette.currentColor}" colorTo="{outerPalette.currentColor | 0x337f00}"/>
		<paint:LayoutAutoPalette id="areaPalette" layout="{myLineGroup}" colorFrom="0x3333CC" colorTo="0xCC3333"/>
	</mx:Array>
	
	<mx:Array id="fills">
		<degrafa:LinearGradientFill id="areaFill" angle="90" enableEvents="false">
			<degrafa:GradientStop color="{areaPalette.currentColor}" alpha=".95"/>
			<degrafa:GradientStop color="{areaPalette.currentColor | 0x999933}" alpha=".65"/>
		</degrafa:LinearGradientFill>
		<degrafa:LinearGradientFill id="clusterFill" angle="45" enableEvents="false">
			<degrafa:GradientStop color="{clusterPalette.currentColor}"/>
			<degrafa:GradientStop color="{clusterPalette.currentColor | 0xFFFFFF}" alpha=".85"/>
		</degrafa:LinearGradientFill>
	</mx:Array>
	
	<mx:Array id="strokes">
		<degrafa:LinearGradientStroke id="colStroke" pixelHinting="true" angle="45" enableEvents="false">
			<degrafa:GradientStop color="0xFFFFFF" alpha=".7"/>
			<degrafa:GradientStop color="0xFFFFFF" alpha=".3"/>
		</degrafa:LinearGradientStroke>
		<degrafa:SolidStroke 
			color="0xFFFFFF" 
			alpha=".3"/>
		<degrafa:SolidStroke 
			id="axisStroke" 
			color="0x222222"  
			pixelHinting="true"/>
		<degrafa:SolidStroke
			id="myStroke"
			color="{areaPalette.currentColor}"
			weight="1"
			alpha="1"
			caps="none"
			pixelHinting="true"/>
	</mx:Array>
	
	<!-- DISPLAY OBJECTS -->
	
	<mx:HBox id="myBox" bottom="50" horizontalCenter="0">
		<mx:HBox>
			<mx:Label text="Curvatura" textAlign="right" verticalCenter="0"/>
			<mx:HSlider width="80"
						id="slider"
						minimum="1"
						maximum="80"
						value="35"
						liveDragging="true"
						showTrackHighlight="false"
						verticalCenter="-5"/>
		</mx:HBox>
		<mx:Label text="|"/>
		<mx:HBox>
			<mx:Label text="numero de puntos" textAlign="right" verticalCenter="0"/>
			<mx:HSlider
				id="dataSlice"
				width="80"
				minimum="1"
				maximum="16"
				value="16"
				snapInterval="1"
				change="{sliceData();}"
				showTrackHighlight="false"
				verticalCenter="-5"/>
		</mx:HBox>
		<mx:HBox>
			<mx:Label text="Inclinar etiquetas" textAlign="right" verticalCenter="0"/>
			<mx:HSlider
				id="labelRotate" 
				width="80"
				minimum="0"
				maximum="90"
				value="0"
				snapInterval="1"
				change="{hAxis.labelRotation=labelRotate.value;dc.invalidateDisplayList();}"
				showTrackHighlight="false"
				verticalCenter="-5"/>
		</mx:HBox>
		<mx:Label text="|"/>
		<mx:HBox>
			<mx:Label text="Area" textAlign="right" verticalCenter="0"/>
			<mx:CheckBox id="area" change="{dc.invalidateDisplayList();}" selected="true"/>
		</mx:HBox>
		<mx:Label text="|"/>
		<mx:HBox>
			<mx:Label text="Ver puntos" textAlign="right" verticalCenter="0"/>
			<mx:CheckBox id="showMarker" change="{dc.invalidateDisplayList();}"/>
		</mx:HBox>
	</mx:HBox>
	
	
	<mx:List id="jugadores_seleccionados" x="3" dataProvider="{lista_jugadores}" width="86" height="500" 
			 backgroundColor="#B7BABC" y="102" labelField="name"
 			 allowMultipleSelection="true" verticalScrollPolicy="on" 
			 keyUp="compara_jugadores_key_up(event)" click="compara_jugadores_click(event)">
	</mx:List>
	
	<mx:Text x="3" y="83" text="Jugadores:" fontSize="12" height="25"/>
	
</mx:Application>
